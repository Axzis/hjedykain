
'use server';

/**
 * @fileOverview An AI agent for generating product descriptions.
 *
 * - generateProductDescription - A function that generates a product description.
 * - GenerateProductDescriptionInput - The input type for the generateProductDescription function.
 * - GenerateProductDescriptionOutput - The return type for the generateProductDescription function.
 */

import { defineFlow, definePrompt, generate } from 'genkit';
import { z } from 'genkit/zod';
import { geminiPro } from 'genkitx/googleai';
import { ai } from '../genkit';

const GenerateProductDescriptionInputSchema = z.object({
  fabricName: z.string().describe('The name of the fabric.'),
  keyProperties: z
    .string()
    .describe(
      'Key properties of the fabric, such as material composition, weave, weight, and finish.'
    ),
});
export type GenerateProductDescriptionInput = z.infer<
  typeof GenerateProductDescriptionInputSchema
>;

const GenerateProductDescriptionOutputSchema = z.object({
  description: z.string().describe('A compelling and informative product description.'),
});
export type GenerateProductDescriptionOutput = z.infer<
  typeof GenerateProductDescriptionOutputSchema
>;

export async function generateProductDescription(
  input: GenerateProductDescriptionInput
): Promise<GenerateProductDescriptionOutput> {
  return generateProductDescriptionFlow(input);
}

const productDescriptionPrompt = definePrompt(
  {
    name: 'generateProductDescriptionPrompt',
    inputSchema: GenerateProductDescriptionInputSchema,
    outputSchema: GenerateProductDescriptionOutputSchema,
  },
  async (input) => {
    return {
      prompt: `You are an expert copywriter specializing in product descriptions for fabrics.

Based on the fabric name and its key properties, create a compelling and informative product description in Indonesian that highlights its features and benefits.

Fabric Name: ${input.fabricName}
Key Properties: ${input.keyProperties}`,
      output: {
        format: 'json',
      },
    };
  }
);


const generateProductDescriptionFlow = defineFlow(
  {
    name: 'generateProductDescriptionFlow',
    inputSchema: GenerateProductDescriptionInputSchema,
    outputSchema: GenerateProductDescriptionOutputSchema,
  },
  async (input) => {
    const llmResponse = await generate({
      prompt: await productDescriptionPrompt.render(input),
      model: geminiPro,
      config: {
        temperature: 0.7,
      },
    });

    const output = llmResponse.output();
    if (!output) {
      throw new Error('No output generated by the language model.');
    }
    
    try {
      // Sometimes the model returns a markdown block with JSON inside
      const cleanedJson = output.toString().replace(/```json\n?|```/g, '');
      const parsed = JSON.parse(cleanedJson);
      return GenerateProductDescriptionOutputSchema.parse(parsed);
    } catch (e) {
        console.error("Failed to parse LLM output:", e);
        throw new Error("AI failed to generate a valid description. Please try again.");
    }
  }
);
